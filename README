#!/usr/bin/env python

# example basictreeview.py

import pygtk
pygtk.require('2.0')
import gtk
import re


def read_file(fpath): 
   BLOCK_SIZE = 2048
   with open(fpath, 'rb') as f: 
       while True: 
           block = f.read(BLOCK_SIZE) 
           if block: 
               yield block 
           else: 
               return

def get_data():
    strs = ''
    for i in read_file(u'test.xml'):
        strs += i
     
    result = re.sub('\t+<\t*|\t+/>\t*','',strs)
    item = {}
    i = 0
    for s in result.split('\r\n'):
        if s!='':
            reg=re.compile("\t")
            length=len(reg.findall(s))
            item[i] = [length,s.replace('\t','')]
            #print s,length,i
            i+=1
    return item

layer = locals()
class BasicTreeViewExample:
    # close the window and quit
    def delete_event(self, widget, event, data=None):
        gtk.main_quit()
        return False

    def __init__(self):
        # Create a new window
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)

        self.window.set_title("Basic TreeView Example")

        self.window.set_size_request(200, 200)

        self.window.connect("delete_event", self.delete_event)

        # create a TreeStore with one string column to use as the model
        self.treestore = gtk.TreeStore(str)

        # we'll add some data now - 4 rows with 3 child rows each
        items = get_data()
           
        for i in items:
            layer['layer%s' % (items[i][0]-1)] = items[i][0]-1
        for child in range(0,len(items)):
            if child == 0 :
                layer['layer%s'%items[child][0]] = self.treestore.append(None, [items[child][1]])
            else:
                layer['layer%s'%items[child][0]] = self.treestore.append(layer['layer%s'%(items[child][0]-1)], [items[child][1]])

        # parent = items[0][1]
        # piter0 = self.treestore.append(None, [parent])  
        # piter1 = self.treestore.append(piter0, [items[1][1]])
        # piter2 = self.treestore.append(piter1, [items[2][1]])
        # piter3 = self.treestore.append(piter2, [items[3][1]])
        # piter4 = self.treestore.append(piter3, [items[4][1]])
        # piter4 = self.treestore.append(piter3, [items[5][1]])
        # piter4 = self.treestore.append(piter3, [items[6][1]])
        # piter5 = self.treestore.append(piter4, [items[7][1]])
        # piter6 = self.treestore.append(piter5, [items[8][1]])
        # piter6 = self.treestore.append(piter5, [items[9][1]])
        # piter6 = self.treestore.append(piter5, [items[10][1]])
        # piter6 = self.treestore.append(piter5, [items[11][1]])
        # piter5 = self.treestore.append(piter4, [items[12][1]])
        # piter6 = self.treestore.append(piter5, [items[13][1]])
        # piter4 = self.treestore.append(piter3, [items[14][1]])
            

        # create the TreeView using treestore
        self.treeview = gtk.TreeView(self.treestore)

        # create the TreeViewColumn to display the data
        self.tvcolumn = gtk.TreeViewColumn('Column 0')

        # add tvcolumn to treeview
        self.treeview.append_column(self.tvcolumn)

        # create a CellRendererText to render the data
        self.cell = gtk.CellRendererText()

        # add the cell to the tvcolumn and allow it to expand
        self.tvcolumn.pack_start(self.cell, True)

        # set the cell "text" attribute to column 0 - retrieve text
        # from that column in treestore
        self.tvcolumn.add_attribute(self.cell, 'text', 0)

        # make it searchable
        self.treeview.set_search_column(0)

        # Allow sorting on the column
        self.tvcolumn.set_sort_column_id(0)

        # Allow drag and drop reordering of rows
        self.treeview.set_reorderable(True)

        self.window.add(self.treeview)

        self.window.show_all()

def main():
    gtk.main()

if __name__ == "__main__":
    tvexample = BasicTreeViewExample()
    main()
